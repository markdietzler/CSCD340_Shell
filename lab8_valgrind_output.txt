==4044== Memcheck, a memory error detector
==4044== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4044== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4044== Command: ./mssh
==4044== Parent PID: 3205
==4044== 
==4044== Conditional jump or move depends on uninitialised value(s)
==4044==    at 0x4C31FBC: strcmp (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4044==    by 0x400FF3: main (cscd340Lab8.c:76)
==4044== 
==4044== Conditional jump or move depends on uninitialised value(s)
==4044==    at 0x4C31FAA: strcmp (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4044==    by 0x400FF3: main (cscd340Lab8.c:76)
==4044== 
==4048== 
==4048== HEAP SUMMARY:
==4048==     in use at exit: 905 bytes in 45 blocks
==4048==   total heap usage: 61 allocs, 16 frees, 12,356 bytes allocated
==4048== 
==4048== LEAK SUMMARY:
==4048==    definitely lost: 0 bytes in 0 blocks
==4048==    indirectly lost: 0 bytes in 0 blocks
==4048==      possibly lost: 0 bytes in 0 blocks
==4048==    still reachable: 905 bytes in 45 blocks
==4048==         suppressed: 0 bytes in 0 blocks
==4048== Rerun with --leak-check=full to see details of leaked memory
==4048== 
==4048== For counts of detected and suppressed errors, rerun with: -v
==4048== Use --track-origins=yes to see where uninitialised values come from
==4048== ERROR SUMMARY: 6 errors from 2 contexts (suppressed: 0 from 0)
==4052== 
==4052== HEAP SUMMARY:
==4052==     in use at exit: 941 bytes in 47 blocks
==4052==   total heap usage: 65 allocs, 18 frees, 12,416 bytes allocated
==4052== 
==4052== LEAK SUMMARY:
==4052==    definitely lost: 0 bytes in 0 blocks
==4052==    indirectly lost: 0 bytes in 0 blocks
==4052==      possibly lost: 0 bytes in 0 blocks
==4052==    still reachable: 941 bytes in 47 blocks
==4052==         suppressed: 0 bytes in 0 blocks
==4052== Rerun with --leak-check=full to see details of leaked memory
==4052== 
==4052== For counts of detected and suppressed errors, rerun with: -v
==4052== Use --track-origins=yes to see where uninitialised values come from
==4052== ERROR SUMMARY: 6 errors from 2 contexts (suppressed: 0 from 0)
==4053== 
==4053== HEAP SUMMARY:
==4053==     in use at exit: 985 bytes in 50 blocks
==4053==   total heap usage: 70 allocs, 20 frees, 12,482 bytes allocated
==4053== 
==4053== LEAK SUMMARY:
==4053==    definitely lost: 0 bytes in 0 blocks
==4053==    indirectly lost: 0 bytes in 0 blocks
==4053==      possibly lost: 0 bytes in 0 blocks
==4053==    still reachable: 985 bytes in 50 blocks
==4053==         suppressed: 0 bytes in 0 blocks
==4053== Rerun with --leak-check=full to see details of leaked memory
==4053== 
==4053== For counts of detected and suppressed errors, rerun with: -v
==4053== Use --track-origins=yes to see where uninitialised values come from
==4053== ERROR SUMMARY: 6 errors from 2 contexts (suppressed: 0 from 0)
==4055== 
==4055== HEAP SUMMARY:
==4055==     in use at exit: 1,102 bytes in 54 blocks
==4055==   total heap usage: 79 allocs, 25 frees, 12,648 bytes allocated
==4055== 
==4055== LEAK SUMMARY:
==4055==    definitely lost: 0 bytes in 0 blocks
==4055==    indirectly lost: 0 bytes in 0 blocks
==4055==      possibly lost: 0 bytes in 0 blocks
==4055==    still reachable: 1,102 bytes in 54 blocks
==4055==         suppressed: 0 bytes in 0 blocks
==4055== Rerun with --leak-check=full to see details of leaked memory
==4055== 
==4055== For counts of detected and suppressed errors, rerun with: -v
==4055== Use --track-origins=yes to see where uninitialised values come from
==4055== ERROR SUMMARY: 6 errors from 2 contexts (suppressed: 0 from 0)
==4044== 
==4044== HEAP SUMMARY:
==4044==     in use at exit: 0 bytes in 0 blocks
==4044==   total heap usage: 85 allocs, 85 frees, 17,352 bytes allocated
==4044== 
==4044== All heap blocks were freed -- no leaks are possible
==4044== 
==4044== For counts of detected and suppressed errors, rerun with: -v
==4044== Use --track-origins=yes to see where uninitialised values come from
==4044== ERROR SUMMARY: 6 errors from 2 contexts (suppressed: 0 from 0)
